#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;


class Node {
public:
	int num = 0;
	int DP=1;
	bool canMove[4] = { false, false, false, false}; // 0: UP, 1: Down, 2: Right, 3:Left
};

int moveY[4] = { -1,1,0,0 }; // 0: UP, 1: Down, 2: Right, 3:Left
int moveX[4] = { 0,0,1,-1 }; // 0: UP, 1: Down, 2: Right, 3:Left


Node Map[500 + 3][500 + 3];


int DFS(int y,int x) {
	if (Map[y][x].DP == 1) {
		for (int i = 0;i < 4;i++) {
			if (Map[y][x].canMove[i]) {
				Map[y][x].DP = max(Map[y][x].DP, DFS(y + moveY[i], x + moveX[i]) + 1);
			}
		}	
	}
	return Map[y][x].DP;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;

	for (int i = 1;i <= N;i++) {
		for (int j = 1;j <= N;j++) {
			cin >> Map[i][j].num;
		}
	}
	
	for (int y = 1;y <= N;y++) {
		for (int x = 1;x <= N;x++) {
			for (int k = 0;k < 4;k++) {
				if (Map[y][x].num < Map[y + moveY[k]][x + moveX[k]].num) {
					Map[y][x].canMove[k] = true;
				}
			}
		}
	}

	for (int i = 1;i <= N;i++) {
		for (int j = 1;j <= N;j++) {
			DFS(i,j);
		}
	}
	int maxDP = 1;
	for (int i = 1;i <= N;i++) {
		for (int j = 1;j <= N;j++) {
			maxDP = max(maxDP, Map[i][j].DP);
		}
	}

	
	cout << maxDP;

}
