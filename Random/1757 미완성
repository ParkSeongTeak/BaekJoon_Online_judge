#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int Di[10000];

int DP[10001][501][2];		//DP[i][j][k]  i분일때 j 만큼 지쳤을때 K = 0이전 쉰것 1 이전 뛴것



int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, M;
	cin >> N >> M;

	for (int i = 0;i < N;i++) {
		cin >> Di[i];
	}

	DP[0][0][0] = 0;
	DP[0][1][1] = Di[0];

	
	for (int i = 1;i < N;i++) {
		
		if (M == 1) {
			DP[i][1][1] = DP[i - 1][0][0] + Di[i];
			DP[i][0][0] = max(DP[i - 1][1][1], DP[i - 1][0][0]);
		}
		else {

			DP[i][0][0] = max(DP[i - 1][0][0], max(DP[i - 1][1][1], DP[i - 1][1][0]));
			DP[i][1][1] = DP[i - 1][0][0] + Di[i];

			DP[i][1][0] = max(DP[i - 1][2][0], DP[i - 1][2][1]);


			for (int j = 2;(j <= M - 1 && j <= i);j++) {
				DP[i][j][0] = max(DP[i - 1][j + 1][0], DP[i - 1][j + 1][1]);
				DP[i][j][1] = DP[i - 1][j - 1][1] + Di[i];

			}

			DP[i][M][1] = DP[i - 1][M - 1][1] + Di[i];

		}
		

	}
	cout << DP[N - 1][0][0];
	



	
}
