#include<iostream>
#include<math.h>
#include<algorithm>
#include<vector>
#include<queue>
#define DefLV 987654321
using namespace std;
int  X, Y;
class Tower {
public:
	int LV = DefLV;
	int idx;
	int x = -1, y = -1;
	vector<Tower*> Near;

	Tower(int x,int y,int idx=0):x(x),y(y),idx(idx) {
	}

};

vector<Tower> T;

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, R;
	double D;
	int  myX,myY;
	
	cin >> N >> R >> D >> X >> Y;
	int idx = 0;
	Tower root(X, Y,idx++);
	root.LV = 0;
	T.push_back(root);
	for (int i = 0;i < N;i++) {
		cin >> myX >> myY;
		Tower tmp(myX, myY, idx++);
		T.push_back(tmp);
	}

	int TSize = T.size();


	
	for (int i = 0;i < TSize;i++) {
		for (int j = i; j < TSize; j++) {
			if (R >= sqrt(pow(T[i].x - T[j].x, 2) + pow(T[i].y - T[j].y, 2))) {
				T[i].Near.push_back(&T[j]);
				T[j].Near.push_back(&T[i]);

			}
		}
	}
	

	queue<Tower> Q;

	Q.push(T.front());
	
	while (!Q.empty()) {
		Tower tmp = Q.front();
		Q.pop();
		for (int i = 0; i < tmp.Near.size();i++) {
			if (tmp.Near[i]->LV == DefLV) {
				tmp.Near[i]->LV = tmp.LV + 1;
				Q.push(*tmp.Near[i]);
			}
			//tmp.Near[i]->LV = min(tmp.Near[i]->LV, tmp.LV + 1);
		}
	}
	double ans=0;
	for (int i = 1;i < T.size();i++) {
	
		if (T[i].LV != DefLV) { ans += D / pow(2,T[i].LV-1); }
	}

	cout << fixed;
	cout.precision(2);
	cout << ans;
	

}
