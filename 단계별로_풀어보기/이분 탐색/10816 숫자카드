#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

int card[500000];
int target[500000];

int marge(int Target,int begin,int end) {
	if (begin >= end) {
		if (card[begin] == Target)
			return begin;
		else
			return -1;
	}
	else {
		int mid = (begin + end) / 2;
		if (Target == card[mid])
			return mid;
		else {
			if (Target < card[mid])
				return marge(Target, begin, mid);
			else {
				return marge(Target, mid+1, end);
			}
		}
	}
}


int sol(int target,int N) {
	int ans=0;
	
	int num = marge(target, 0, N-1);

	if (num == -1) {
		return 0;
	}
	else {
		ans = 1;
		int tmp = num;
		int jump = 16384;
		while (jump > 0){ //&& tmp < N && card[tmp] == target) {
			if (tmp + jump < N && card[tmp + jump] == target) {
				ans += jump;
				tmp += jump;
			}
			else {
				jump = jump / 2;
			}
		}
		jump = 16384;
		tmp = num;
		while (jump > 0){// && tmp >=  0 && card[tmp] == target) {
			if (tmp - jump >= 0 && card[tmp - jump] == target) {
				ans += jump;
				tmp -= jump;
			}
			else {
				jump = jump / 2;
			}
		}
		
		return ans;
	}
	
}

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);


	int N,M;
	
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> card[i];
	}
	sort(card, card + N);
	
	cin >> M;
	
	for (int i = 0; i < M; i++) {
		cin >> target[i];
	}
	for (int i = 0; i < M; i++) {
		cout << sol(target[i], N) << " ";
	}
}
