#include <iostream>

using namespace std;

int arrUnionMap[1000001];
int n;

int do_find(int x) {    
    if (x == arrUnionMap[x]) return x;
    return arrUnionMap[x] = do_find(arrUnionMap[x]);
}
//https://sihyungyou.github.io/baekjoon-1717/
/*
int do_find(int x) {
    while (arrUnionMap[x] != x) x = arrUnionMap[x];
    return x;
} //초기 설계

선형적으로 부모만 따라감 

나의 설계와 다른점 : find 할 때 마다 정점의 자손들이 가리키는 부모노드를 
최상위 노드로 갱신해줌

*/

void do_union(int x, int y) {
    int px = do_find(x);
    int py = do_find(y);

    if (px > py) arrUnionMap[px] = py;
    else if (px < py) arrUnionMap[py] = px;
}

int main() {

    int m, connect;
    int before = 0, now;

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);



    cin >> n >> m;
    for (int i = 0; i <= n; i++) arrUnionMap[i] = i;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            
            cin >> connect;
            if (connect) {
                do_union(i, j);
            }
        }
    }
    
    while (cin >> now) {    //연결만 되면 문제없음
        if (before == 0) {
            before = now;
        }
        else {
            if (do_find(before) != do_find(now)) {
                cout << "NO";
                return 0;
            }

        }
    }

    cout << "YES";

    return 0;
}
