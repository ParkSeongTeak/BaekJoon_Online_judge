#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

bool visit[500 + 1];
int cnt = 0;
bool End = false;

class Node {
public :
	int idx;
	vector<Node*>linked;
};

void clear(int N) {
	cnt = 0;
	fill(visit, visit + N + 1, false);
	End = false;
	
}

void dfs(Node* node) {
	if (node != NULL) {
		if (visit[node->idx]) {			//사이클

			if (!End) {
				End = true;
				cnt--;
			}

			return;
		}

		visit[node->idx] = true;


		for (const auto next : node->linked) {
			for (int num = 0; num < next->linked.size();num++) {
				if (next->linked[num] == node) {
					next->linked[num] = NULL;

				}
			}
			dfs(next);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	while (true) {
		int N, M;
		cin >> N >> M;
		
		if (N == 0 && M == 0)
			break;

		Node * arr = new Node[N+1];

		for (int i = 0; i < M; i++) {
			int p1, p2;
			cin >> p1 >> p2;
			arr[p1].linked.push_back(&arr[p2]);
			arr[p2].linked.push_back(&arr[p1]);
		}

		for (int i = 1; i <= N; i++) {
			if (!visit[i]) {
				End = false;
				cnt++;
				dfs(&arr[i]);
			}
		}
		delete[] arr;
		clear(N);

	}
}
