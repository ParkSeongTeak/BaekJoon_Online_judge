#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#define INF 987654321
using namespace std;

int map[301][301];

class Node {
public :
	int y, x, idx;
	Node(int y, int x, int idx) : y(y), x(x), idx(idx) {}

};

int BFS(int N, int y1, int x1, int y2, int x2) {
	int dy[8] = {1, 2, 2, 1, -1, -2, -2, -1};
	int dx[8] = {-2, -1, 1, 2, -2, -1, 1, 2};
	map[y1][x1] = 0;
	queue<Node>Q;
	Q.push({ y1,x1,0 });
	while (!Q.empty()) {
		Node tmp = Q.front();
		Q.pop();
		int x = tmp.x, y = tmp.y, idx = tmp.idx;
		for (int i = 0; i < 8; i++) {
			if (y + dy[i] >= 0 && y + dy[i] < N  && x + dx[i] >= 0 && x + dx[i] < N) {
				if (map[y + dy[i]][x + dx[i]] > tmp.idx + 1) {
					map[y + dy[i]][x + dx[i]] = tmp.idx + 1;
					Q.push({ y + dy[i], x + dx[i], map[y + dy[i]][x + dx[i]] });
				}
			}
		}

	}
	if (map[y2][x2] != INF)
		return map[y2][x2];
	else
		return -1;
}

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int N, y1, x1, y2, x2;
		cin >> N >> y1>> x1>> y2>> x2;

		for (int i = 0; i < N; i++) {
			fill(map[i], map[i] + N, INF);
		}

		cout << BFS(N, y1, x1, y2, x2)<<"\n";
		
	}

}
