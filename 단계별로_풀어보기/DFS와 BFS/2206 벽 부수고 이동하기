#include<iostream>
#include<queue>
#include<algorithm>
#include<string>
#define INF 987654321
using namespace std;

int map[1000][1000];
int map_dist[1000][1000];
class node {
public:
	pair<int, int> point;
	int dist;

};

vector<int> Dijkstra(int N,int M, pair<int, int>v1) {
	
	int dy[4] = { 0, 0, 1, -1 };
	int dx[4] = { 1, -1, 0, 0 };
	

	for (int y = 0; y < N; y++) {
		fill(map_dist[y], map_dist[y] + M, INF);
	}

	queue<node>pq;
	pq.push({ v1,0 });
	map_dist[v1.first][v1.second] = 0;
	while (!pq.empty()) {
		int y = pq.front().point.first;
		int x = pq.front().point.second;
		int dist = pq.front().dist;
		
		pq.pop();

		for (int i = 0; i < 4; i++) {
			if (y + dy[i] >= 0 && y + dy[i] < N && x + dx[i] >= 0 && x + dx[i] < M ) {
				if ( map[y + dy[i]][x + dx[i]] == 0) {
					if (map_dist[y + dy[i]][x + dx[i]] > dist + 1 ) {
						map_dist[y + dy[i]][x + dx[i]] = dist + 1;
						pq.push({ { y + dy[i] ,x + dx[i] }, dist + 1 });
					}
				}

			}
		}


	}

	vector<int>dist;
	dist.push_back(map_dist[0][0]);
	dist.push_back(map_dist[N-1][M-1]);
	return dist;

}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, M;
	vector<int> tmp;
	int ans = INF;
	int dx[4] = { 0,0,1,-1 };
	int dy[4] = { 1,-1,0,0 };

	vector<pair<int,int>> wall;
	cin >> N >> M;
	for (int y = 0; y < N; y++) {
		string tmp;
		cin >> tmp;

		for (int i = 0; i < tmp.size(); i++) {
			map[y][i] = tmp[i] - '0';
			if (map[y][i] == 1) {
				wall.push_back({ y,i });
			}
		}

		
	}
	
	tmp = Dijkstra(N, M, { 0,0 });
	ans = tmp[0] + tmp[1];
	//cout << tmp[0];
	//cout << tmp[1];
	for (const auto &next : wall) {
		int cnt = 0;
		
		for (int i = 0; i < 4; i++) {
			int sideY = next.first + dy[i];
			int sideX = next.second + dx[i];
			if (sideY >= 0 && sideY < N && sideX >= 0 && sideX < M) {
				if (map[sideY][sideX] == 0)
					cnt++;
			}
		}
		if (cnt >= 2) {
			tmp = Dijkstra(N, M, next);
			ans = min(ans, tmp[0] + tmp[1]);
		}
	}
	if (ans >= INF)
		cout << -1;
	else
		cout << ans+1;

}
