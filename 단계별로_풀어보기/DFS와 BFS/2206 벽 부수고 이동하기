#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<queue>
#define INF 987654321
using namespace std;

class point {
public: 
	int y, x;
};

bool graph[1000][1000];
int visit[1000][1000][2]; // block, N, M

int bfs(int N,int M) {
	int dy[4] = { 0,0,-1,1 };
	int dx[4] = { 1,-1,0,0 };

	queue<pair<pair<int, int>, int >> Q;	//y,x,block
	Q.push({ {0,0},1 });
	visit[0][0][1] = 1;

	while (!Q.empty()) {
		
		int y = Q.front().first.first;
		int x = Q.front().first.second;
		int block = Q.front().second;
		Q.pop();
		if (y == N - 1 && x == M - 1) {

			return visit[y][x][block];
		}


		for (int i = 0; i < 4; i++) {
			
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny < N && ny >= 0 && nx < M && nx >= 0) {
				//cout << ny << " " << nx << "\n";
				
		
				if (graph[ny][nx] == true && block == 1) {	// 벽부수기
					visit[ny][nx][block - 1] = visit[y][x][block] + 1;
					Q.push({ { ny,nx }, block - 1 });
				}
				else if (graph[ny][nx] == false && visit[ny][nx][block] == 0 ) {
					visit[ny][nx][block] = visit[y][x][block] + 1;
					Q.push({ { ny, nx }, block });
				}

			}
		}
	}
	return -1;
}

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, M;
	cin >> N >> M;
	for (int y = 0; y < N; y++) {
		string tmp;
		cin >> tmp;
		for (int x = 0; x < M; x++) {
			graph[y][x] = tmp[x] - '0';
		}
	}

	
	
	cout << bfs(N, M);


}
