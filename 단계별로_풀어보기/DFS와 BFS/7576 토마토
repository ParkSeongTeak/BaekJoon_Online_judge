#define MAX 1001
#include<iostream>
#include<algorithm>
#include<queue>
#include<vector>
using namespace std;

int map[MAX][MAX];
bool BFS_check[MAX][MAX];
int N, M;
queue<pair<int,int>>Q;

void BFS() {
	int dy[4] = {1, 0, -1, 0};
	int dx[4] = {0, 1, 0, -1};
	
	int n = N;
	int m = M;


	while (!Q.empty()) {
		pair<int, int>tmp = { Q.front().first , Q.front().second };
		Q.pop();
		BFS_check[tmp.first][tmp.second] = true;

		for (int i = 0; i < 4; i++) {
			if (tmp.first + dy[i] >= 0 && tmp.first + dy[i] < N && tmp.second + dx[i] >= 0 && tmp.second + dx[i] < M ) {
				if (map[tmp.first + dy[i]][tmp.second + dx[i]] == 0) {
					map[tmp.first + dy[i]][tmp.second + dx[i]] = map[tmp.first][tmp.second] + 1;

					Q.push({ tmp.first + dy[i] , tmp.second + dx[i] });

				}
			}
		}


	}

}

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);


	int ans = 0;
	cin >> M >> N;
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			cin >> map[y][x];
			if (map[y][x] == 1) {
				Q.push({ y,x });
			}
		}
	}
	BFS();

	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			ans = max(ans, map[y][x]);
			if (map[y][x] == 0) {
				cout << -1;
				return 0;
			}
		}
	}

	cout << ans-1;
}
