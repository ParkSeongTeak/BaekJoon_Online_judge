#include<iostream>
#include<queue>
#include<string>
#include<algorithm>
using namespace std;

int map[100][100];
//bool BFS_check[100][100];
int N, M;

void BFS(int y ,int x,int N,int M) {
	int dx[4] = { 1,0,-1,0 };
	int dy[4] = { 0,1,0,-1 };

	int n = N;
	int m = M;
	
	queue<pair<int,int>> q;
	q.push(make_pair(y,x));
	while (!q.empty()) {
		pair<int,int> tmp = { q.front().first , q.front().second };
		q.pop();
		for (int i = 0; i < 4; i++) {
			if (tmp.first + dy[i] >= 0 && tmp.first + dy[i] < n && tmp.second + dx[i] >= 0 && tmp.second + dx[i] < m) {
				if (map[tmp.first + dy[i]][tmp.second + dx[i]] == 0 || map[tmp.first + dy[i]][tmp.second + dx[i]] > map[tmp.first][tmp.second] + 1) {
					//BFS_check[tmp.first + dy[i]][tmp.second + dx[i]] = true;
					map[tmp.first + dy[i]][tmp.second + dx[i]] = map[tmp.first][tmp.second] + 1;
					q.push(make_pair(tmp.first + dy[i],tmp.second + dx[i] ));

				}
			}
		}
	}
}

int main() {
		
	int ans = 0;

	cin >> M >> N;
	for (int y = 0;  y < N; y++) {
		for (int x = 0; x < M; x++) {
			cin >> map[y][x];
		}
	}
	for (int y = 0; y < N; y++ ) {
		for (int x = 0; x < M; x++) {
			if (map[y][x] == 1) {
				BFS(y, x,N,M);
			}
		}
	}
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			ans = max(ans, map[y][x]);
			if (map[y][x] == 0) {
				cout << -1;
				return 0;
			}
			
		}
	}
	cout << ans - 1;
}
