#include<iostream>
#include<queue>
#include<string>
using namespace std;

int map[100][100];
bool BFS_check[100][100];
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
int N, M;

void BFS() {
	int n = N;
	int m = M;

	queue<pair<int,int>> q;
	q.push({ 0,0 });
	while (!q.empty()) {
		pair<int,int> tmp;
		tmp = { q.front().first , q.front().second };
		if (q.front().first == n - 1 && q.front().second == m - 1) {
			break;
		}

		q.pop();
		for (int i = 0; i < 4; i++) {
			if (tmp.first + dy[i] >= 0 && tmp.first + dy[i] < n && tmp.second + dx[i] >= 0 && tmp.second + dx[i] < m) {
				if (map[tmp.first + dy[i]][tmp.second + dx[i]] != 0 && !BFS_check[tmp.first + dy[i]][tmp.second + dx[i]]) {
					BFS_check[tmp.first + dy[i]][tmp.second + dx[i]] = true;
					map[tmp.first + dy[i]][tmp.second + dx[i]] += map[tmp.first][tmp.second];
					q.push({ tmp.first + dy[i],tmp.second + dx[i]});
					
				}
			}
		}
	}
}

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	cin >> N >> M;
	for (int y = 0;  y < N; y++) {
		string tmp;
		cin >> tmp;
		for (int x = 0; x < tmp.size(); x++) {
			map[y][x] = tmp[x] - '0';
		}
	}

	BFS();
	cout << map[N - 1][M - 1];
}
