#include<iostream>
#include<vector>
#include<queue>
using namespace std;


bool map[1001][1001];
bool dfs_check[1000];
bool bfs_check[1000];
int cnt = 0;

void DFS(int V) {

	dfs_check[V] = true;
	cnt++;
	for (int i = 1; i <= 1000; i++) {
		if (map[V][i] && !dfs_check[i]) {
			DFS(i);
		}
	}
	
}
/*


void BFS(int V) {
	
	queue<int> q;
	q.push(V);
	bfs_check[V] = true;
	cout << V<<" ";
	
	while (!q.empty()) {
		V = q.front();
		q.pop();


		for (int i = 0; i <= 1000; i++) {
			if (map[V][i] && !bfs_check[i]) {
				cout << i<<" ";
				bfs_check[i] = true;
				q.push(i);

			}
		}
	}


}
*/
int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, M;
	cin >> N >> M;
	for (int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;
		map[a][b] = true;
		map[b][a] = true;
	}
	DFS(1);
	cout << cnt-1;
}
