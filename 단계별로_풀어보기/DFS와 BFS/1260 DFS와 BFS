#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int MAX = 1000;
int N, M;
bool map[MAX][MAX];
bool check_bfs[MAX];
bool check_dfs[MAX];

void DFS(int V) {
	check_dfs[V] = true;
	cout << V << " ";
	for (int i = 0; i < MAX; i++) {
		if (map[V][i] && !check_dfs[i]) {
			DFS(i);
		}

	}
}

void BFS(int V) {
	queue<int> q; //Queue 생성
	q.push(V); //초기 시작점 저장
	check_bfs[V] = true; //초기 방문 체크

	while (!q.empty()) {
		int current = q.front();
		q.pop();
		cout << current<<" ";
		for (int i = 0; i < MAX; i++) {
			if (map[current][i] && !check_bfs[i]) {
				check_bfs[i] = true;
				q.push(i);
			}
		}
		
	}
}

int main() {
	int V;
	cin >> N>>M>>V;
	//그래프 노드 관계 설정
	for (int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;
		map[a][b] = true;
		map[b][a] = true;
	}
	DFS(V);
	cout << "\n";
	BFS(V);
	return 0;
}
