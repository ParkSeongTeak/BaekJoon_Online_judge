#include<iostream>
#include<vector>
#include<queue>
#include<string>
#include<algorithm>
using namespace std;

int dy[4] = { 1,-1,0 ,0 };
int dx[4] = { 0, 0, 1 ,-1 };

bool map[26][26];
bool dfs_check[26][26];

int idx = 0;
int cnt[625];


void DFS(int N,int y ,int x , bool near = false) {
	if (dfs_check[y][x] || map[y][x] == 0) return;
	
	dfs_check[y][x] = true;
	if (!near) {
		idx += 1;
	}
	cnt[idx] += 1;

	
	for (int i = 0; i < 4; i++) {
		if (y + dy[i] >= 0 && y + dy[i] < N && x + dx[i] >= 0 && x + dx[i] < N) {
			DFS(N, y + dy[i], x + dx[i], true);
		}
	}

		
	
}
int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	string str[26];

	int N;
	cin >> N;
	for (int y = 0; y < N; y++) {
		cin >> str[y];
	}
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < N; x++) {
			map[y][x] = str[y][x] - '0';
		}
	}
	
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < N; x++) {
			DFS(N,y,x);
		}
	}
	
	cout << idx << "\n";
	sort(cnt, cnt + (idx + 1));
	for (int i = 1; i <= idx;i++) {
		cout << cnt[i] << "\n";
	}
	
	

}
