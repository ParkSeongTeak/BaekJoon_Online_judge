
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
using namespace std;

class Node {
public:
	int idx;
	Node * Linked[3] = { NULL,NULL, NULL }; // 
	int LinkedNum = 0;
};


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie();

	int K;
	cin >> K;
	for (int i = 0; i < K;  i++) {
		int V, E;
		int num;
		cin >> V >> E;
		vector<Node> arr(V + 1);
		try {
			//if (V == E + 1) {
			for (int j = 0; j < E; j++) {
				int num1, num2;
				cin >> num1 >> num2;
				if (V == E + 1) {
					for (int k = 0; k < 4; k++) {
						if (K == 3) {
							throw 0;
						}
						if (arr[num1].Linked[k] == NULL) {
							arr[num1].Linked[k] = &arr[num2];
							arr[num1].LinkedNum += 1;

							break;

						}
					}
					for (int k = 0; k < 4; k++) {
						if (K == 3) {
							throw 0;
						}
						if (arr[num2].Linked[k] == NULL) {
							arr[num2].Linked[k] = &arr[num1];
							arr[num2].LinkedNum += 1;

							break;
						}
					}
				}
			}


			//}
			//else {
			//	throw "NO";
			//}
			int num;
			bool HaveRoot = false;
			for (num = 1; num <= V; num++) {				
				if (arr[num].LinkedNum == 2) {
					HaveRoot = true;
					break;
				}
			}
			if (!HaveRoot) { throw 0; }
			throw 1;
		}
		catch (int i) {
			if (i) {
				cout << "Yes" << "\n";
			}
			else {
				cout << "No" << "\n";
			}
		}

	}

}
