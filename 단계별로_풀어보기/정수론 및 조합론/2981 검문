#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

#include <iostream>
#include <algorithm>

using namespace std;

vector<int> vec;
vector<int> ans;

int gcd(int a, int b) {		//유클리드 호제법 최대공약수 외워두자 좋은 함수다.
	return a % b ? gcd(b, a%b) : b;
}


int main() {
	int n, include_m, i,tmp;
	cin >> n;
	for (i = 0; i < n; i++) {
		cin >> tmp;
		vec.push_back(tmp);
	}
	sort(vec.begin(),vec.end());

	include_m = vec[1] - vec[0];
	for (i = 2; i < n; i++)					
		include_m = gcd(include_m, vec[i] - vec[i - 1]);

	for (i = 1; i*i <= include_m; i++)		//지금 0 -> i까지 처리하는중에 include_m / i 도 다 처리하면서 오기때문에 i*i 가 중간에서 만나는 지점이다.
		if (include_m % i == 0) {
			ans.push_back(i);
			if (i != include_m / i) ans.push_back(include_m / i);
		}

	sort(ans.begin(), ans.end());
	for (int i = 0; i < ans.size(); i++)
		if (ans[i] != 1)
			cout << ans[i] << " ";

}


// 참고: https://kyunstudio.tistory.com/88
