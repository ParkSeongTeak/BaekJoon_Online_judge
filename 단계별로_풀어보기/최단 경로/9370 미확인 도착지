#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#define INF 987654321
using namespace std;

struct Node {
	int w, idx;
	bool operator < (const Node &other) const {
		return w > other.w;
	}
};


vector<Node>graph[2005];

int Dijkstra(int V, int v1, int v2) {
	vector<int> length(V + 1, INF);
	length[v1] = 0;
	priority_queue<Node> pq;
	pq.push({ 0,v1 });
	while (!pq.empty()) {
		Node tmp = pq.top();
		pq.pop();
		if (tmp.w > length[tmp.idx])
			continue;

		for (const auto &next : graph[tmp.idx]) {
			if (tmp.w + next.w < length[next.idx]) {
				length[next.idx] = tmp.w + next.w;
				pq.push({ tmp.w + next.w,next.idx });
			}
		}
	}

	return length[v2];

}


int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	

	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int GH;
		int n, m, t;
		cin >> n >> m >> t;
		int s, g, h;
		cin >> s >> g >> h;
		for (int i = 0; i < m; i++) {
			int a, b, d;
			cin >> a >> b >> d;
			graph[a].push_back({d,b});
			graph[b].push_back({d,a});

			if ((a == g && b == h) || (a == h && b == g)) {
				GH = d;
			}
		}
		vector<int>test;
		for (int i = 0; i < t; i++) {
			int a;
			cin >> a;
			test.push_back(a);
		}
		sort(test.begin(), test.end());

		for (const auto &next : test) {

			int SToNext = Dijkstra(n , s, next);

			if (GH + Dijkstra(n , g, s) + Dijkstra(n , h, next) == SToNext) {
				cout << next << " ";
			}
			else if (GH + Dijkstra(n , h, s) + Dijkstra(n , g, next) == SToNext) {
				cout << next << " ";
			}
		}

		for (int i = 0; i <= n+1; i++) {
			graph[i].clear();
		}


		cout << "\n";
	}

}
