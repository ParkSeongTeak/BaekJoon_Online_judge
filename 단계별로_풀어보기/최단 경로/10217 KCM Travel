#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#define INF 987654321
using namespace std;


struct Node {
	int time, idx, money;

	bool operator <(const Node &Other) const{
		return time > Other.time;
	}
};



vector<Node> graph[101];

vector<int> Dijkstra(int N, int v1, int v2) {
	vector<int> dist(N+1,INF);
	vector<int> Mny(N + 1);
	priority_queue<Node>pq;
	
	fill(dist.begin(), dist.end(), INF);
	pq.push({ 0,v1 });
	dist[v1] = 0;

	while (!pq.empty()) {
		Node tmp = pq.top();
		pq.pop();

		if (dist[tmp.idx] < tmp.time) {
			continue;
		}

		for (const auto &next : graph[tmp.idx]) {
			dist[next.idx] = min(dist[next.idx], dist[tmp.idx] + tmp.time);

		}

	}

	return dist;
}

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int N, M, K;
		cin >> N >> M >> K;
		for (int i = 0; i < K; i++) {
			int A, B, W,money;
			cin >> A >> B >> W>> money;
			graph[A].push_back({ W,B,money });

		}
	}

}




