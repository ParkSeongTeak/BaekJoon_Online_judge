#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#define INF 987654321
using namespace std;

class Node {
public: 
	int time, idx, money;
	
	bool operator < (const Node &other) const {
		return time > other.time;
	}

};

vector<Node> graph[101];

int Dijkstra(int N,int M) {

	vector<int> *DP = new vector<int>[N + 1];//DP[idx][money] = time;
	for (int i = 0; i < N + 1; i++) {
		DP[i] = vector<int>(M + 1, INF);
	}

	DP[1][0] = 0;

	priority_queue<Node> pq;
	pq.push({ 0,1,0 });
	
	while (!pq.empty()) {

		Node tmp = pq.top();
		pq.pop();
		
		if (DP[tmp.idx][tmp.money] < tmp.time) {
			continue;
		}

		for (const auto &next : graph[tmp.idx]) {
			if (tmp.money + next.money <= M) {
				if (DP[next.idx][tmp.money + next.money] > next.time + tmp.time) {
					DP[next.idx][tmp.money + next.money] = next.time + tmp.time;
					pq.push({ DP[next.idx][tmp.money + next.money] , next.idx, tmp.money + next.money });
				}
			}
		}
	}

	int MIN = INF;
	for (int i = 0; i < M + 1; i++) {
		MIN = min(MIN, DP[N][i]);
	}


	delete[] DP;
	for (int i = 0; i < N + 1; i++) {
		graph[i].clear();
	}

	return MIN;

	
}

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		int N, M, K;
		cin >> N >> M >> K;
		
		for (int j = 0; j < K; j++) {
			int u, v, c, d;//u시작,v도착,c비용,d시간;
			cin >> u >> v >> c >> d;
			graph[u].push_back({ d,v,c });

		}
		int ans = Dijkstra(N, M);
		if (ans != INF)
			cout << ans << "\n";
		else
			cout << "Poor KCM" << "\n";
	}

}
