#include<iostream>
#include<queue>
#include<algorithm>
#include<vector>
#define INF 500

using namespace std;

int map[INF][INF];
int DP[INF][INF];
int dy[4] = { 0,0,1,-1 };
int dx[4] = { 1,-1,0,0 };
int N, M;

int DFS(int y, int x) {
	int k;

	if (y == N-1 && x == M-1) {
		return 1;
	}
	else if (DP[y][x] == -1) {
		DP[y][x] = 0;
		for (k = 0; k < 4; k++) {
			int ny = y + dy[k];
			int nx = x + dx[k];
			if ( ny >= 0 && ny < N && nx >= 0 && nx < M && map[y][x] > map[ny][nx]) {
				DP[y][x] += DFS(ny, nx);
			}
		}
	}
	return DP[y][x];
}

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M;
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < M; x++) {
			cin >> map[y][x];
		}
	}
	for (int i = 0; i < N; i++)
		fill(DP[i], DP[i] + M, -1);

	cout << DFS(0, 0);

}
