#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

class unit {
public :
	int idx, front, back;
	bool operator < (const unit &Other) const{
		if (back != Other.back)
			return back > Other.back;
		else
			return front < Other.front;
	}

	unit(int idx, int front, int back) :idx(idx), front(front), back(back) {};
};

int main() {
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	vector<unit> arr;
	vector<unit> ForSort;

	int N;
	bool IDX[501];
	int cnt;
	int idx = 0;

	long long ans = 0;


	cin >> N;
	cnt = N;
	fill(IDX, IDX + N, true);

	
	for (int i = 0; i < N; i++) {
		int front, back;
		cin >> front >> back;
		unit tmp(idx, front, back);
		arr.push_back(tmp);
		ForSort.push_back(tmp);
		idx++;
	}

	ForSort.pop_back();

	sort(ForSort.begin(), ForSort.end());

	for (int i = 0; i < ForSort.size(); i++) {
		int now = ForSort[i].idx;
		int next = now + 1;
		for (; next < N && !IDX[next]; next++);
		//cout << arr[now].front<<" "<< arr[now].back << " " << arr[next].back<<"\n";
		ans += arr[now].front * arr[now].back *arr[next].back;
		arr[next].front = arr[now].front;

		IDX[now] = false;
	}
	
	cout << ans;
}
